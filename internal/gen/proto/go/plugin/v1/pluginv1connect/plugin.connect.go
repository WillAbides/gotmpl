// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plugin/v1/plugin.proto

package pluginv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/willabides/gotmpl/internal/gen/proto/go/plugin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PluginServiceName is the fully-qualified name of the PluginService service.
	PluginServiceName = "plugin.v1.PluginService"
)

// PluginServiceClient is a client for the plugin.v1.PluginService service.
type PluginServiceClient interface {
	// ListFunctions returns a list of functions provided by the plugin.
	ListFunctions(context.Context, *connect_go.Request[v1.ListFunctionsRequest]) (*connect_go.Response[v1.ListFunctionsResponse], error)
	// ExecuteFunction executes the function with the given name and arguments.
	ExecuteFunction(context.Context, *connect_go.Request[v1.ExecuteFunctionRequest]) (*connect_go.Response[v1.ExecuteFunctionResponse], error)
}

// NewPluginServiceClient constructs a client for the plugin.v1.PluginService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPluginServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PluginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pluginServiceClient{
		listFunctions: connect_go.NewClient[v1.ListFunctionsRequest, v1.ListFunctionsResponse](
			httpClient,
			baseURL+"/plugin.v1.PluginService/ListFunctions",
			opts...,
		),
		executeFunction: connect_go.NewClient[v1.ExecuteFunctionRequest, v1.ExecuteFunctionResponse](
			httpClient,
			baseURL+"/plugin.v1.PluginService/ExecuteFunction",
			opts...,
		),
	}
}

// pluginServiceClient implements PluginServiceClient.
type pluginServiceClient struct {
	listFunctions   *connect_go.Client[v1.ListFunctionsRequest, v1.ListFunctionsResponse]
	executeFunction *connect_go.Client[v1.ExecuteFunctionRequest, v1.ExecuteFunctionResponse]
}

// ListFunctions calls plugin.v1.PluginService.ListFunctions.
func (c *pluginServiceClient) ListFunctions(ctx context.Context, req *connect_go.Request[v1.ListFunctionsRequest]) (*connect_go.Response[v1.ListFunctionsResponse], error) {
	return c.listFunctions.CallUnary(ctx, req)
}

// ExecuteFunction calls plugin.v1.PluginService.ExecuteFunction.
func (c *pluginServiceClient) ExecuteFunction(ctx context.Context, req *connect_go.Request[v1.ExecuteFunctionRequest]) (*connect_go.Response[v1.ExecuteFunctionResponse], error) {
	return c.executeFunction.CallUnary(ctx, req)
}

// PluginServiceHandler is an implementation of the plugin.v1.PluginService service.
type PluginServiceHandler interface {
	// ListFunctions returns a list of functions provided by the plugin.
	ListFunctions(context.Context, *connect_go.Request[v1.ListFunctionsRequest]) (*connect_go.Response[v1.ListFunctionsResponse], error)
	// ExecuteFunction executes the function with the given name and arguments.
	ExecuteFunction(context.Context, *connect_go.Request[v1.ExecuteFunctionRequest]) (*connect_go.Response[v1.ExecuteFunctionResponse], error)
}

// NewPluginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPluginServiceHandler(svc PluginServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/plugin.v1.PluginService/ListFunctions", connect_go.NewUnaryHandler(
		"/plugin.v1.PluginService/ListFunctions",
		svc.ListFunctions,
		opts...,
	))
	mux.Handle("/plugin.v1.PluginService/ExecuteFunction", connect_go.NewUnaryHandler(
		"/plugin.v1.PluginService/ExecuteFunction",
		svc.ExecuteFunction,
		opts...,
	))
	return "/plugin.v1.PluginService/", mux
}

// UnimplementedPluginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPluginServiceHandler struct{}

func (UnimplementedPluginServiceHandler) ListFunctions(context.Context, *connect_go.Request[v1.ListFunctionsRequest]) (*connect_go.Response[v1.ListFunctionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plugin.v1.PluginService.ListFunctions is not implemented"))
}

func (UnimplementedPluginServiceHandler) ExecuteFunction(context.Context, *connect_go.Request[v1.ExecuteFunctionRequest]) (*connect_go.Response[v1.ExecuteFunctionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plugin.v1.PluginService.ExecuteFunction is not implemented"))
}
